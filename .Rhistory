countries %>% select(contains("Stock")) %>% corplot()
scatter(countries, Stock.of.narrow.money, Stock.of.broad.money)
scatter(countries, Electricity.production, Electricity.consumption)
dfPlot(countries)
countries %>% select_if(is.numeric) %>% dfPlot
df_summary(countries)
df_summary(countries)
data("countries")
View(countries)
summary(countries$Telephones.mobile.cellular)
library(qacData)
?countries
library(qacData)
?countries
library(qacData)
?countries
library(qacData)
?countries
library(qacData)
library(pkgdown)
build_site()
library(qacData)
build_site()
?xgboost
library(xgboost)
?xgboost
data(iris)
set.seed(1234)
library(caret)
index <- createDataPartition(iris$Species, p=0.7, list=FALSE)
train <- iris[index, ]
test  <- iris[-index, ]
prop.table(table(train$Species))
prop.table(table(test$Species))
help(iris)
help(iris)
summary(iris)
set.seed(1234)
library(caret)
index <- createDataPartition(iris$Species, p=0.7, list=FALSE)
train <- iris[index, ]
test  <- iris[-index, ]
train.control <- trainControl(method="cv", number=10)
set.seed(1234)
model.rf <- train(Species ~ .,
data = train,
method = "svmRadial",
metric = "Accuracy",
trControl=train.control)
set.seed(1234)
model.svm <- train(Species ~ .,
data = train,
method = "svmRadial",
metric = "Accuracy",
trControl=train.control)
model.svm
model.svm$finalModel
varImp(model.svm)
plot(varImp(model.svm))
pred <- predict(model.svm, test)
confusionMatrix(pred, test$Species)
ocr <- read.csv("letterdata.csv")
library(qacData)
build_site()
library(pkgdown)
build_site()
hist(countries$Labor.force)
hist(countries$Labor.force, bins=30)
hist(countries$Labor.force, breaks=30)
library(qacData)
build_site()
summary(countries$Airports)
summary(countries$Railways)
summary(countries$Merchant.marine)
library(qacData)
build_site()
head(countries$Date.of.Founding.Independence)
x <- as.Date(countries$Date.of.Founding.Independence, format="%m/%d/%Y")
head(x)
countries$Date.of.Founding.Independence <- as.Date(countries$Date.of.Founding.Independence, format="%m/%d/%Y")
usethis::use_data(countries)
usethis::use_data(countries, overwrite=TRUE)
library(qacData)
build_site()
head(countries$Longitude.of.Capital)
head(countries$Latitude.of.Capital)
library(qacData)
build_site()
library(qacData)
build_site()
df <- read.csv("student.csv")
df <- read.csv("R/student.csv")
View(df)
str(df)
student <- df
usesthis::use_data(student)
usethis::use_data(student)
library(qacData)
?student
library(qacData)
library(pkgdown)
build_site()
build_site()
qacr::df_summary(student)
scatter(student, absences, G3)
qacr::scatter(student, absences, G3)
df <- read.csv("R/student.csv")
df <- read.csv("R/student.csv")
df$school <- factor(df$school,
levels=c("GP", "MS"),
labels=c("Gabriel Pereira", "Mousinho da Silveira"))
df$sex <- factor(df$sex,
levels=c("F", "M"),
labels=c("Female", "Male"))
df$address <- factor(df$address,
levels=c("U", "R"),
labels=c("Urban", "Rural"))
df$famsize <- factor(df$famsize,
levels=c("LE3", "GT3"),
labels=c("Less than or equal to 3", "Greater than 3"))
df$Pstatus <- factor(df$Pstatus,
levels=c("T", "A"),
labels=c("Living together", "Living apart"))
df$Medu <- factor(df$Medu,
levels=c(0, 1, 2, 3, 4),
labels=c("None", "Primary (4th grade)",
"5th to 9th grade",
"secondary education", "Higher education"),
order=TRUE)
df$Fedu <- factor(df$Fedu,
levels=c(0, 1, 2, 3, 4),
labels=c("None", "Primary (4th grade)",
"5th to 9th grade",
"secondary education", "Higher education"),
order=TRUE)
df$Mjob <- factor(df$Mjob)
df$Fjob <- factor(df$Fjob)
df$reason <- factor(df$reason)
df$guardian <- factor(df$guardian)
df$traveltime <- factor(df$traveltime,
levels=c(1, 2, 3, 4),
labels=c("< 15 min.", "15-30 min.",
"30 min. to 1 hrour",
"> 1 hour"),
order=TRUE)
df_summary(df)
qacr::df_summary(df)
df$studytime <- factor(df$studytime,
levels=c(1, 2, 3, 4),
labels=c("< 2 hours", "2-5 hours",
"5-10 hours",
"> 10 hours"),
order=TRUE)
df$schoolsup <- factor(df$schoolsup)
df$famsup <- factor(df$famsup)
df$paid <- factor(df$paid)
df$activities <- factor(df$activities)
df$nursery <- factor(df$nursery)
df$higher <- factor(df$higher)
df$internet <- factor(df$internet)
df$romantic <- factor(df$romantic)
df <- read.csv("R/student.csv")
df$school <- factor(df$school,
levels=c("GP", "MS"),
labels=c("Gabriel Pereira", "Mousinho da Silveira"))
df$sex <- factor(df$sex,
levels=c("F", "M"),
labels=c("Female", "Male"))
df$address <- factor(df$address,
levels=c("U", "R"),
labels=c("Urban", "Rural"))
df$famsize <- factor(df$famsize,
levels=c("LE3", "GT3"),
labels=c("Less than or equal to 3", "Greater than 3"))
df$Pstatus <- factor(df$Pstatus,
levels=c("T", "A"),
labels=c("Living together", "Living apart"))
df$Medu <- factor(df$Medu,
levels=c(0, 1, 2, 3, 4),
labels=c("None", "Primary (4th grade)",
"5th to 9th grade",
"secondary education", "Higher education"),
order=TRUE)
df$Fedu <- factor(df$Fedu,
levels=c(0, 1, 2, 3, 4),
labels=c("None", "Primary (4th grade)",
"5th to 9th grade",
"secondary education", "Higher education"),
order=TRUE)
df$Mjob <- factor(df$Mjob)
df$Fjob <- factor(df$Fjob)
df$reason <- factor(df$reason)
df$guardian <- factor(df$guardian)
df$traveltime <- factor(df$traveltime,
levels=c(1, 2, 3, 4),
labels=c("< 15 min.", "15-30 min.",
"30 min. to 1 hrour",
"> 1 hour"),
order=TRUE)
df$studytime <- factor(df$studytime,
levels=c(1, 2, 3, 4),
labels=c("< 2 hours", "2-5 hours",
"5-10 hours",
"> 10 hours"),
order=TRUE)
df$schoolsup <- factor(df$schoolsup)
df$famsup <- factor(df$famsup)
df$paid <- factor(df$paid)
df$activities <- factor(df$activities)
df$nursery <- factor(df$nursery)
df$higher <- factor(df$higher)
df$internet <- factor(df$internet)
df$romantic <- factor(df$romantic)
qacr::df_summary(df)
student <- df
usethis::use_data(student)
usethis::use_data(student, overwrite=TRUE)
library(qacData)
build_site()
library(qacData)
build_site()
d1=read.table("R/student-mat.csv",sep=";",header=TRUE)
d1=read.table("R/student-mat.csv",sep=";",header=TRUE)
d2=read.table("R/student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,
by=c("school","sex","age","address",
"famsize","Pstatus","Medu","Fedu",
"Mjob","Fjob","reason","nursery","internet"))
df$school <- factor(df$school,
levels=c("GP", "MS"),
labels=c("Gabriel Pereira", "Mousinho da Silveira"))
df$sex <- factor(df$sex,
levels=c("F", "M"),
labels=c("Female", "Male"))
df$address <- factor(df$address,
levels=c("U", "R"),
labels=c("Urban", "Rural"))
df$famsize <- factor(df$famsize,
levels=c("LE3", "GT3"),
labels=c("Less than or equal to 3", "Greater than 3"))
df$Pstatus <- factor(df$Pstatus,
levels=c("T", "A"),
labels=c("Living together", "Living apart"))
df$Medu <- factor(df$Medu,
levels=c(0, 1, 2, 3, 4),
labels=c("None", "Primary (4th grade)",
"5th to 9th grade",
"secondary education", "Higher education"),
order=TRUE)
df$Fedu <- factor(df$Fedu,
levels=c(0, 1, 2, 3, 4),
labels=c("None", "Primary (4th grade)",
"5th to 9th grade",
"secondary education", "Higher education"),
order=TRUE)
df$Mjob <- factor(df$Mjob)
df$Fjob <- factor(df$Fjob)
df$reason <- factor(df$reason)
df$guardian <- factor(df$guardian)
df$traveltime <- factor(df$traveltime,
levels=c(1, 2, 3, 4),
labels=c("< 15 min.", "15-30 min.",
"30 min. to 1 hrour",
"> 1 hour"),
order=TRUE)
df$studytime <- factor(df$studytime,
levels=c(1, 2, 3, 4),
labels=c("< 2 hours", "2-5 hours",
"5-10 hours",
"> 10 hours"),
order=TRUE)
df$schoolsup <- factor(df$schoolsup)
df$famsup <- factor(df$famsup)
df$paid <- factor(df$paid)
df$activities <- factor(df$activities)
df$nursery <- factor(df$nursery)
df$higher <- factor(df$higher)
df$internet <- factor(df$internet)
df$romantic <- factor(df$romantic)
qacr::df_summary(df)
libary(pgkdown)
library(pkgdown)
build_site()
qacr::corplot(student)
library(qacData)
qacr::corplot(student)
df <- read.csv("R/insurance.csv")
View(df)
insurance <- df
usethis::use_data(insurance)
library(qacData)
pkgdown::build_site()
pkgdown::build_site()
qacr::df_summary(insurance)
library(qacData)
pkgdown::build_site()
library(usethis)
use_vignette(qacData, title="Data for Learning")
library(qacData)
use_vignette(qacData, title="Data for Learning")
use_vignette("qacData", title="Data for Learning")
library(qacData)
pkgdown::build_site()
library(pkgdown)
build_site()
build_site()
build_site()
build_site()
build_site()
library(pkgdown)
build_site()
build_site()
build_site()
library(qacData)
names(appointments)
appointments$Hypertension <- appointments$Hipertension
appointments$Hipertension <- NULL
usethis::use_data(appointments)
usethis::use_data(appointments, overwrite=TRUE)
qpdf
install.packages("qpdf")
library(qacData)
build_site()
df <- read.csv("R/heart.csv")
View(df)
View(df)
names(df)[1] <- Age
names(df)[1] <- "Age"
View(df)
heart <- df
df$Thal <- factor(df$Thal, levels=c(3, 6, 7),
labels=c("normal", "fixed defect", "reversable defect"))
View(df)
df <- read.csv("R/heart.csv")
names(df)[1] <- "age"
df <- read.csv("R/heart.csv")
View(df)
df <- read.csv("R/heart.csv")
View(df)
names(df)
df$cp <- factor(df$cp,
levels=c(1,2,3,4),
labels=c("typical angina",
"atypical angina",
"non-anginal pain",
"asymptomatic"))
df$restecg <- factor(df$restecg,
levels=c(0, 1,2),
labels=c("normal",
"ST-T wave abnormality",
"left ventricular hypertrophy"))
df$slope<- factor(df$slope,
levels=c(1,2,3),
labels=c("upsloping",
"flat",
"downsloping"))
df$thal <- factor(df$thal, levels=c(3, 6, 7),
labels=c("normal", "fixed defect", "reversable defect"))
df$disease <- ifelse(df$disease == 0, 0, 1)
df$disease <- factor(df$disease, levels=c(0, 1),
labels=c("no", "yes"))
df$sex <- factor(df$sex, levels=c(0,1), labels=c("female", "male"))
heart <- df
usethis::use_data(heart, overwrite=TRUE)
View(heart)
df$ca <- as.numeric(df$ca)
heart <- df
usethis::use_data(heart, overwrite=TRUE)
library(qacData)
?heart
library(qacData)
?heart
library(qacData)
?heart
library(qacData)
?heart
library(qacData)
?heart
summary(heart)
build_site()
pkgdown::build_site()
pkgdown::build_site()
table(heart$restecg)
library(qacData)
build_site()
pkgdown::build_site()
library(qacData)
?qacData
data(heart)
library(caret)
qacr::tab(heart, disease)
set.seed(1234)
index <- createDataPartition(heart$disease, p=.8, list=FALSE)
train <- heart[index,]
test <- heart[-index,]
train.control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
probs=TRUE)
train.control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE)
model.xgb <- train(disease ~ ., data=train,
method="xgboost",
metric="ROC",
trControl=train.control)
heart <- na.omit(heart)
set.seed(1234)
index <- createDataPartition(heart$disease, p=.8, list=FALSE)
train <- heart[index,]
test <- heart[-index,]
train.control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE)
model.xgb <- train(disease ~ ., data=train,
method="xgboost",
metric="ROC",
trControl=train.control)
model.xgb <- train(disease ~ ., data=train,
method="xgb",
metric="ROC",
trControl=train.control)
model.xgb <- train(disease ~ ., data=train,
method="xgbTree",
metric="ROC",
trControl=train.control)
model.svm <- train(disease ~ ., data=train,
method="svmRadial",
metric="ROC",
trControl=train.control,
preProcess=c("center", "scale"))
model.xgb
model.svm
?resamples
result <- resamples(list(xgb=model.xgb, svm=model.svm))
summary(result)
bwplot(result)
dotplot(result)
pred <- predict(model.xgb, test)
confusionMatrix(pred, test$disease, positive="Yes")
confusionMatrix(pred, test$disease)
confusionMatrix(pred, test$disease, positive="yes")
qacr::rocPlot(model.xgb)
library(qacData)
devtools::check_win_release()
?border
library(qacData)
?border
data(border)
force(border)
force(border)
View(border)
table(border$Border)
table(border$Measure)
Boston <- MASS::Boston
getwd()
library(usethis)
use_data(Boston)
Boston$medv <- Boston$medv * 3.99
Boston$tax <- Boston$tax * 3.99
Boston$bk <- sqrt(black/1000) + 0.63
Boston$bk <- sqrt(Boston$black/1000) + 0.63
plot(Boston$black, Boston$bk)
y <- 1000*(Boston$bk - 0.63)^2
cor(y, Boston$black)
Boston$black <- Boston$bk
Boston$bk <- NULL
use_data(Boston)
use_data(Boston, overwrite=TRUE)
library(qacData)
library(pkgdown)
build_site()
build_site()
library(qacData)
library(qacData)
build_site()
?Boston
?MASS
library(qacData)
?Boston
library(qacData)
?Boston
build_site()
library(qacr)
univariatePlot(Boston)
univariatePlot(Boston, medv)
univariatePlot(MASS::Boston, medv)
library(qacData)
build_site()
build_site()
build_site()
library(qacData)
library(pkgdown)
build_site()
library(qacData)
library(qacData)
CheckLazyDataCompression <- function(pkg)
{
pkg_name <- sub("_.*", "", pkg)
lib <- tempfile(); dir.create(lib)
zs <- c("gzip", "bzip2", "xz")
res <- integer(3); names(res) <- zs
for (z in zs) {
opts <- c(paste0("--data-compress=", z),
"--no-libs", "--no-help", "--no-demo", "--no-exec", "--no-test-load")
install.packages(pkg, lib, INSTALL_opts = opts, repos = NULL, quiet = TRUE)
res[z] <- file.size(file.path(lib, pkg_name, "data", "Rdata.rdb"))
}
ceiling(res/1024)
}
ChekLazyDataCompression(qacData)
CheckLazyDataCompression(qacData)
CheckLazyDataCompression("qacData")
